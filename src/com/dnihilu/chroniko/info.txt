/*

*					   PROJECT INFO
*
* Project Name:	Chroniko Rhythm Engine
* Author:		Donovan Rodgers
* 
* This is an endeavor to create a rhythm engine completely
* from scratch, which will support modules from various
* games like Rock Band, Stepmania, etc.  It's meant to be
* utterly customizable, so users will have plenty of
* variables to mess around with and create a playing
* experience they'll enjoy, as well as be able to easily
* create mods that may even add entirely new features to
* the game.
* 
* Right now, it's only being developed to support a Phase
* Shift like game, but eventually I want to expand all the
* classes into interfaces which can then be used to create
* modules for other game types.
* 


* 					 CLASS DESCRIPTION
* 
* Chroniko
* The main class which takes arguments and launches the
* game.  The main thread only initializes everything at
* the start, then supposedly halts once all the OggDecoder
* and Ticker threads are running.
* 
* GameWindow
* Extends the JPanel class.  It creates a window and
* figures out where everything is drawn inside it.  This
* gets called by the Ticker each frame to redraw itself.
* 
* MusicSystem
* This loads up OggDecoders for each of the audio files
* in the song folder and keeps track of the time.  Both
* the NoteSequencer and Ticker ask it about the time.
* 
* OggDecoder
* A class I stole from a website.  Each one runs its own
* thread and just loads the audio as it goes, sending the
* audio straight to the system.  I plan to rewrite this as
* an implementation of TargetAudioLine or whatever it's
* called, and just have one thread which reads from these
* lines, mixes them and sends them to the system.
* 
* Ticker
* After everything is loaded, a thread is made which runs
* in a while loop, and does exactly two things: it tells
* the GameWindow to refresh, and tells the NoteSequencer
* to load up more notes if necessary.
* 
* NoteSequencer
* Loads up a midi file and figures out what tracks to read
* based on the boards, then loads notes from the tracks as
* necessary.
* 
* Board
* A board is any graphical display that gets information
* from a NoteSequencer and displays it.  It may or may not
* have an associated PlayerController, depending on if it
* uses a "bot" to play the notes, shows unplayable notes
* (e.g. lyrics), or even has notes at all (what I'll use
* for the background will probably be a board that gets
* information from the Venue and Events tracks).
* 
* BoardType enum
* not finished yet
* 
* PlayerController
* Any controller input, by default, is processed by the
* window, and GameWindow simply redirects it to all
* PlayerControllers.  This means that there can be many
* boards which take controls from one controller (keyboard
* notably).
* 
* Note interface
* Whenever the Board gets info from the NoteSequencer, it
* creates a Note with the proper characteristics.  This
* keeps track of things like its color, lane, position,
* sustain length, hopo status, etc and is called upon by
* the board to draw itself onto the canvas.
* 
* NoteGem
* Implements the Note interface
* 
* BeatMarker
* Implements the Note interface
* 
* 
* Test
* (pay this no mind)




*/